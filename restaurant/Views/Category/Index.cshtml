@model IEnumerable<Category>
@{
    ViewBag.Title = "Manage Categories";
}

<div class="container pt-6 pb-4">
    <h1 class="fw-bold mb-5">Manage Categories</h1>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show rounded-lg mb-4" role="alert" id="successAlert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show rounded-lg mb-4" role="alert" id="errorAlert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div id="globalError" class="alert alert-danger rounded-lg" style="display: none;"></div>

    <div class="mb-4">
        <div class="row g-3 align-items-center">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text bg-white"><i class="bi bi-search"></i></span>
                    <input type="text" id="searchName" class="form-control rounded-lg" placeholder="Search by name" />
                </div>
            </div>
            <div class="col-md-6 text-md-end">
                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
                    <i class="bi bi-plus-circle"></i> Create New Category
                </button>
            </div>
        </div>
    </div>

    <div id="categoryList">
        @await Html.PartialAsync("_CategoryList", Model)
    </div>

    <!-- Add Category Modal -->
    <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-lg">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold" id="addCategoryModalLabel">Create Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addCategoryForm" asp-action="Add" asp-controller="Category" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="addCategoryName" class="form-label fw-bold">Name</label>
                            <input type="text" class="form-control form-control-sm rounded-lg" id="addCategoryName" name="Name" required />
                            <span class="text-danger small" id="addCategoryNameError"></span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary btn-sm">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-lg">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold" id="editCategoryModalLabel">Edit Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editCategoryForm" asp-action="Edit" asp-controller="Category" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <input type="hidden" id="editCategoryId" name="CategoryId" />
                        <div class="mb-3">
                            <label for="editCategoryName" class="form-label fw-bold">Name</label>
                            <input type="text" class="form-control form-control-sm rounded-lg" id="editCategoryName" name="Name" required />
                            <span class="text-danger small" id="editCategoryNameError"></span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary btn-sm">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Category Modal -->
    <div class="modal fade" id="deleteCategoryModal" tabindex="-1" aria-labelledby="deleteCategoryModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-lg">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold" id="deleteCategoryModalLabel">Delete Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="deleteCategoryForm" asp-action="Delete" asp-controller="Category" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <input type="hidden" id="deleteCategoryId" name="id" />
                        <p>Are you sure you want to delete this category?</p>
                        <p class="text-danger small" id="deleteError"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-outline-danger btn-sm">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Auto-dismiss alerts after 3 seconds
            setTimeout(function () {
                $('#successAlert, #errorAlert').fadeOut('slow');
            }, 3000);

            // Show global message (error or success)
            function showGlobalMessage(message, isSuccess = false) {
                $('#globalError')
                    .removeClass('alert-danger alert-success')
                    .addClass(isSuccess ? 'alert-success' : 'alert-danger')
                    .text(message)
                    .show();
                setTimeout(function () {
                    $('#globalError').fadeOut('slow');
                }, 3000);
            }

            // Dynamic Search
            function performSearch(clearSearch = false) {
                var searchName = clearSearch ? '' : $('#searchName').val();
                if (clearSearch) {
                    $('#searchName').val('');
                }
                console.log('Performing search, clearSearch:', clearSearch);
                try {
                    $.ajax({
                        url: '@Url.Action("Search", "Category")',
                        type: 'GET',
                        data: { searchName: searchName },
                        success: function (data) {
                            console.log('Search AJAX success, data length:', data.length);
                            $('#categoryList').html(data);
                        },
                        error: function (xhr, status, error) {
                            console.error('Search AJAX error:', status, error, xhr.status, xhr.responseText);
                            showGlobalMessage('Error loading categories: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                            $('#categoryList').html('<p>Error loading categories.</p>');
                        }
                    });
                } catch (e) {
                    console.error('Search error:', e);
                    showGlobalMessage('Unexpected error during search.');
                }
            }

            $('#searchName').on('input', function () {
                performSearch();
            });

            // Initial load
            performSearch();

            // Clean up modal state
            $('#addCategoryModal, #editCategoryModal, #deleteCategoryModal').on('hidden.bs.modal', function () {
                $(this).find('form')[0].reset();
                $(this).find('.text-danger').text('');
            });

            // Add Category
            $('#addCategoryForm').on('submit', function (e) {
                e.preventDefault();
                console.log('Add form submitted');
                try {
                    $.ajax({
                        url: '@Url.Action("Add", "Category")',
                        type: 'POST',
                        data: $(this).serialize(),
                        success: function (response) {
                            console.log('Add AJAX response:', JSON.stringify(response, null, 2));
                            if (response.success) {
                                $('#addCategoryModal').modal('hide');
                                performSearch(true);
                                showGlobalMessage('Category added successfully.', true);
                            } else {
                                $('#addCategoryNameError').text(response.errors ? response.errors.join(', ') : 'Failed to add category.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Add AJAX error:', status, error, xhr.status, xhr.responseText);
                            $('#addCategoryNameError').text('An error occurred. Please try again.');
                        }
                    });
                } catch (e) {
                    console.error('Add error:', e);
                    $('#addCategoryNameError').text('Unexpected error adding category.');
                }
            });

            // Edit Category
            $(document).on('click', '.edit-btn', function (e) {
                e.stopPropagation();
                var categoryId = $(this).data('id');
                console.log('Edit button clicked for category ID:', categoryId);
                if (!categoryId || isNaN(categoryId)) {
                    showGlobalMessage('Invalid category ID.');
                    return;
                }
                try {
                    $.ajax({
                        url: '@Url.Action("Edit", "Category")',
                        type: 'GET',
                        data: { id: categoryId },
                        success: function (response) {
                            console.log('Edit GET response:', JSON.stringify(response, null, 2));
                            if (response && response.success && response.category && response.category.categoryId) {
                                $('#editCategoryId').val(response.category.categoryId);
                                $('#editCategoryName').val(response.category.name);
                                $('#editCategoryModal').modal('show');
                            } else {
                                showGlobalMessage(response && response.message ? response.message : 'Failed to load category data.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Edit GET AJAX error:', status, error, xhr.status, xhr.responseText);
                            showGlobalMessage('Error loading category data: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                } catch (e) {
                    console.error('Edit error:', e);
                    showGlobalMessage('Unexpected error loading category.');
                }
            });

            $('#editCategoryForm').on('submit', function (e) {
                e.preventDefault();
                var categoryId = $('#editCategoryId').val();
                console.log('Edit form submitted, CategoryId:', categoryId);
                if (!categoryId || isNaN(categoryId)) {
                    $('#editCategoryNameError').text('Category ID is missing or invalid.');
                    return;
                }
                try {
                    $.ajax({
                        url: '@Url.Action("Edit", "Category")',
                        type: 'POST',
                        data: $(this).serialize(),
                        success: function (response) {
                            console.log('Edit POST response:', JSON.stringify(response, null, 2));
                            if (response && response.success) {
                                $('#editCategoryModal').modal('hide');
                                performSearch(true);
                                showGlobalMessage('Category updated successfully.', true);
                            } else {
                                $('#editCategoryNameError').text(response && response.message ? response.message : (response && response.errors ? response.errors.join(', ') : 'Failed to save category.'));
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Edit POST AJAX error:', status, error, xhr.status, xhr.responseText);
                            $('#editCategoryNameError').text('Error saving category: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                } catch (e) {
                    console.error('Edit save error:', e);
                    $('#editCategoryNameError').text('Unexpected error saving category.');
                }
            });

            // Delete Category
            $(document).on('click', '.delete-btn', function (e) {
                e.stopPropagation();
                var categoryId = $(this).data('id');
                console.log('Delete button clicked for category ID:', categoryId);
                if (!categoryId || isNaN(categoryId)) {
                    showGlobalMessage('Invalid category ID.');
                    return;
                }
                try {
                    $.ajax({
                        url: '@Url.Action("DeleteCheck", "Category")',
                        type: 'GET',
                        data: { id: categoryId },
                        success: function (response) {
                            console.log('DeleteCheck GET response:', JSON.stringify(response, null, 2));
                            if (response && response.success && response.category && response.category.categoryId) {
                                $('#deleteCategoryId').val(response.category.categoryId);
                                $('#deleteCategoryModal').modal('show');
                            } else {
                                showGlobalMessage(response && response.message ? response.message : 'Failed to load category data.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('DeleteCheck GET AJAX error:', status, error, xhr.status, xhr.responseText);
                            showGlobalMessage('Error loading category data: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                } catch (e) {
                    console.error('Delete check error:', e);
                    showGlobalMessage('Unexpected error checking category.');
                }
            });

            $('#deleteCategoryForm').on('submit', function (e) {
                e.preventDefault();
                var categoryId = $('#deleteCategoryId').val();
                console.log('Delete form submitted, CategoryId:', categoryId);
                if (!categoryId || isNaN(categoryId)) {
                    $('#deleteError').text('Category ID is missing or invalid.');
                    return;
                }
                try {
                    $.ajax({
                        url: '@Url.Action("Delete", "Category")',
                        type: 'POST',
                        data: $(this).serialize(),
                        success: function (response) {
                            console.log('Delete POST response:', JSON.stringify(response, null, 2));
                            if (response && response.success) {
                                $('#deleteCategoryModal').modal('hide');
                                performSearch(true);
                                showGlobalMessage('Category deleted successfully.', true);
                            } else {
                                $('#deleteError').text(response && response.message ? response.message : 'Failed to delete category.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Delete POST AJAX error:', status, error, xhr.status, xhr.responseText);
                            $('#deleteError').text('Error deleting category: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                } catch (e) {
                    console.error('Delete error:', e);
                    $('#deleteError').text('Unexpected error deleting category.');
                }
            });
        });
    </script>
}