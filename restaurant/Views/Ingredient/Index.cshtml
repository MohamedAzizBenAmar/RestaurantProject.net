@model IEnumerable<Ingredient>
@{
    ViewBag.Title = "Manage Ingredients";
}
@section Styles {
        <style>
            #ingredientList {
                min-height: 200px;
            }
            #globalError {
                margin-bottom: 15px;
                display: none;
            }
        </style>
}

<h2>Manage Ingredients</h2>

@if (TempData["Success"] != null)
{
        <div class="alert alert-success alert-dismissible fade show" role="alert" id="successAlert">
        @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
}
@if (TempData["Error"] != null)
{
        <div class="alert alert-danger alert-dismissible fade show" role="alert" id="errorAlert">
        @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
}
<div id="globalError" class="alert alert-danger"></div>

<div class="mb-4">
    <div class="row">
        <div class="col-md-4">
            <input type="text" id="searchName" class="form-control" placeholder="Search by name" />
        </div>
        <div class="col-md-8">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createIngredientModal">Create New Ingredient</button>
        </div>
    </div>
</div>

<div id="ingredientList">
    @await Html.PartialAsync("_IngredientList", Model)
</div>

<!-- Create Ingredient Modal -->
<div class="modal fade" id="createIngredientModal" tabindex="-1" aria-labelledby="createIngredientModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createIngredientModalLabel">Create Ingredient</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createIngredientForm" asp-action="Create" asp-controller="Ingredient" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="form-group">
                        <label for="createIngredientName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="createIngredientName" name="Name" required />
                        <span class="text-danger field-validation-error" id="createIngredientNameError"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Ingredient Modal -->
<div class="modal fade" id="editIngredientModal" tabindex="-1" aria-labelledby="editIngredientModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editIngredientModalLabel">Edit Ingredient</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editIngredientForm" asp-action="Edit" asp-controller="Ingredient" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="editIngredientId" name="IngredientId" />
                    <div class="form-group">
                        <label for="editIngredientName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="editIngredientName" name="Name" required />
                        <span class="text-danger field-validation-error" id="editIngredientNameError"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Ingredient Modal -->
<div class="modal fade" id="deleteIngredientModal" tabindex="-1" aria-labelledby="deleteIngredientModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteIngredientModalLabel">Delete Ingredient</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="deleteIngredientForm" asp-action="Delete" asp-controller="Ingredient" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="deleteIngredientId" name="id" />
                    <p>Are you sure you want to delete this ingredient?</p>
                    <span class="text-danger" id="deleteError"></span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Details Ingredient Modal -->
<div class="modal fade" id="detailsIngredientModal" tabindex="-1" aria-labelledby="detailsIngredientModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsIngredientModalLabel">Ingredient Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Name:</strong> <span id="detailsIngredientName"></span></p>
                <p><strong>Linked Products:</strong> <span id="detailsIngredientProducts"></span></p>
                <span class="text-danger" id="detailsError"></span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            $(document).ready(function () {
                // Auto-dismiss alerts after 3 seconds
                setTimeout(function () {
                    $('#successAlert, #errorAlert').fadeOut('slow');
                }, 3000);

                // Show global message (error or success)
                function showGlobalMessage(message, isSuccess = false) {
                    $('#globalError')
                        .removeClass('alert-danger alert-success')
                        .addClass(isSuccess ? 'alert-success' : 'alert-danger')
                        .text(message)
                        .show();
                    setTimeout(function () {
                        $('#globalError').fadeOut('slow');
                    }, 3000);
                }

                // Dynamic Search
                function performSearch(clearSearch = false) {
                    var searchName = clearSearch ? '' : $('#searchName').val();
                    if (clearSearch) {
                        $('#searchName').val('');
                    }
                    var searchUrl = '@Url.Action("Search", "Ingredient")';
                    console.log('Performing search, clearSearch:', clearSearch, 'URL:', searchUrl);
                    $.ajax({
                        url: searchUrl,
                        type: 'GET',
                        data: { searchName: searchName },
                        success: function (data) {
                            console.log('Search AJAX success, data length:', data.length);
                            $('#ingredientList').html(data);
                        },
                        error: function (xhr, status, error) {
                            console.error('Search AJAX error:', status, error, 'Status:', xhr.status, 'Response:', xhr.responseText);
                            showGlobalMessage('Error loading ingredients: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                            $('#ingredientList').html('<p>Error loading ingredients.</p>');
                        }
                    });
                }

                $('#searchName').on('input', function () {
                    performSearch();
                });

                // Initial load
                performSearch();

                // Clean up modal state
                $('#createIngredientModal, #editIngredientModal, #deleteIngredientModal, #detailsIngredientModal').on('show.bs.modal', function () {
                    $('.modal-backdrop').remove();
                    $('body').removeClass('modal-open');
                    $('#createIngredientNameError, #editIngredientNameError, #deleteError, #detailsError').text('');
                });

                $('#createIngredientModal, #editIngredientModal, #deleteIngredientModal, #detailsIngredientModal').on('hidden.bs.modal', function () {
                    setTimeout(function () {
                        $('.modal-backdrop').remove();
                        $('body').removeClass('modal-open');
                    }, 100);
                });

                // Create Ingredient
                $('#createIngredientForm').on('submit', function (e) {
                    e.preventDefault();
                    console.log('Create form submitted');
                    $.ajax({
                        url: '@Url.Action("Create", "Ingredient")',
                        type: 'POST',
                        data: $(this).serialize(),
                        success: function (response) {
                            console.log('Create AJAX response:', JSON.stringify(response, null, 2));
                            if (response.success) {
                                $('#createIngredientModal').modal('hide');
                                $('#createIngredientForm')[0].reset();
                                $('#createIngredientNameError').text('');
                                performSearch(true);
                                showGlobalMessage('Ingredient added successfully.', true);
                            } else {
                                $('#createIngredientNameError').text(response.errors ? response.errors.join(', ') : 'Failed to create ingredient.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Create AJAX error:', status, error, xhr.status, xhr.responseText);
                            $('#createIngredientNameError').text('An error occurred. Please try again.');
                        }
                    });
                });

                // Edit Ingredient
                $(document).on('click', '.edit-btn', function () {
                    var ingredientId = $(this).data('id');
                    console.log('Edit button clicked for ingredient ID:', ingredientId);
                    if (!ingredientId || isNaN(ingredientId)) {
                        showGlobalMessage('Invalid ingredient ID.');
                        return;
                    }
                    $.ajax({
                        url: '@Url.Action("Edit", "Ingredient")',
                        type: 'GET',
                        data: { id: ingredientId },
                        success: function (response) {
                            console.log('Edit GET response:', JSON.stringify(response, null, 2));
                            if (response && response.success && response.ingredient && response.ingredient.ingredientId) {
                                $('#editIngredientId').val(response.ingredient.ingredientId);
                                $('#editIngredientName').val(response.ingredient.name);
                                $('#editIngredientNameError').text('');
                                $('#editIngredientModal').modal('show');
                            } else {
                                showGlobalMessage(response && response.message ? response.message : 'Failed to load ingredient data.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Edit GET AJAX error:', status, error, xhr.status, xhr.responseText);
                            showGlobalMessage('Error loading ingredient data: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                });

                $('#editIngredientForm').on('submit', function (e) {
                    e.preventDefault();
                    var ingredientId = $('#editIngredientId').val();
                    console.log('Edit form submitted, IngredientId:', ingredientId);
                    if (!ingredientId || isNaN(ingredientId)) {
                        $('#editIngredientNameError').text('Ingredient ID is missing or invalid.');
                        return;
                    }
                    $.ajax({
                        url: '@Url.Action("Edit", "Ingredient")',
                        type: 'POST',
                        data: $(this).serialize(),
                        success: function (response) {
                            console.log('Edit POST response:', JSON.stringify(response, null, 2));
                            if (response && response.success) {
                                $('#editIngredientModal').modal('hide');
                                $('#editIngredientForm')[0].reset();
                                $('#editIngredientNameError').text('');
                                performSearch(true);
                                showGlobalMessage('Ingredient updated successfully.', true);
                            } else {
                                $('#editIngredientNameError').text(response && response.message ? response.message : (response && response.errors ? response.errors.join(', ') : 'Failed to save ingredient.'));
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Edit POST AJAX error:', status, error, xhr.status, xhr.responseText);
                            $('#editIngredientNameError').text('Error saving ingredient: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                });

                // Delete Ingredient
                $(document).on('click', '.delete-btn', function () {
                    var ingredientId = $(this).data('id');
                    console.log('Delete button clicked for ingredient ID:', ingredientId);
                    if (!ingredientId || isNaN(ingredientId)) {
                        showGlobalMessage('Invalid ingredient ID.');
                        return;
                    }
                    $.ajax({
                        url: '@Url.Action("DeleteCheck", "Ingredient")',
                        type: 'GET',
                        data: { id: ingredientId },
                        success: function (response) {
                            console.log('DeleteCheck GET response:', JSON.stringify(response, null, 2));
                            if (response && response.success && response.ingredient && response.ingredient.ingredientId) {
                                $('#deleteIngredientId').val(response.ingredient.ingredientId);
                                $('#deleteError').text('');
                                $('#deleteIngredientModal').modal('show');
                            } else {
                                showGlobalMessage(response && response.message ? response.message : 'Failed to load ingredient data.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('DeleteCheck GET AJAX error:', status, error, xhr.status, xhr.responseText);
                            showGlobalMessage('Error loading ingredient data: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                });

                $('#deleteIngredientForm').on('submit', function (e) {
                    e.preventDefault();
                    var ingredientId = $('#deleteIngredientId').val();
                    console.log('Delete form submitted, IngredientId:', ingredientId);
                    if (!ingredientId || isNaN(ingredientId)) {
                        $('#deleteError').text('Ingredient ID is missing or invalid.');
                        return;
                    }
                    $.ajax({
                        url: '@Url.Action("Delete", "Ingredient")',
                        type: 'POST',
                        data: $(this).serialize(),
                        success: function (response) {
                            console.log('Delete POST response:', JSON.stringify(response, null, 2));
                            if (response && response.success) {
                                $('#deleteIngredientModal').modal('hide');
                                $('#deleteIngredientForm')[0].reset();
                                $('#deleteError').text('');
                                performSearch(true);
                                showGlobalMessage('Ingredient deleted successfully.', true);
                            } else {
                                $('#deleteError').text(response && response.message ? response.message : 'Failed to delete ingredient.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Delete POST AJAX error:', status, error, xhr.status, xhr.responseText);
                            $('#deleteError').text('Error deleting ingredient: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                });

                // Details Ingredient
                $(document).on('click', '.details-btn', function () {
                    var ingredientId = $(this).data('id');
                    console.log('Details button clicked for ingredient ID:', ingredientId);
                    if (!ingredientId || isNaN(ingredientId)) {
                        showGlobalMessage('Invalid ingredient ID.');
                        return;
                    }
                    $.ajax({
                        url: '@Url.Action("Details", "Ingredient")',
                        type: 'GET',
                        data: { id: ingredientId },
                        success: function (response) {
                            console.log('Details GET response:', JSON.stringify(response, null, 2));
                            if (response && response.success && response.ingredient && response.ingredient.ingredientId) {
                                $('#detailsIngredientName').text(response.ingredient.name);
                                $('#detailsIngredientProducts').text(response.ingredient.products.length > 0 ? response.ingredient.products.join(', ') : 'None');
                                $('#detailsError').text('');
                                $('#detailsIngredientModal').modal('show');
                            } else {
                                showGlobalMessage(response && response.message ? response.message : 'Failed to load ingredient data.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Details GET AJAX error:', status, error, xhr.status, xhr.responseText);
                            showGlobalMessage('Error loading ingredient data: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                });
            });
        </script>
}