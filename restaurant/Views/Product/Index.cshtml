@model IEnumerable<Product>
@{
    ViewBag.Title = "Menu Items";
}
@section Styles {
        <style>
            #searchResults {
                min-height: 200px;
            }
            #globalError {
                margin-bottom: 15px;
                display: none;
            }
            .fixed-image-height {
                height: 200px;
                object-fit: cover;
            }
        </style>
}

<div class="container py-5">
    <h2 class="fw-bold mb-5">Menu Items</h2>

    @if (TempData["Success"] != null)
    {
            <div class="alert alert-success alert-dismissible fade show rounded-lg" role="alert" id="successAlert">
            @TempData["Success"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
    }
    @if (TempData["Error"] != null)
    {
            <div class="alert alert-danger alert-dismissible fade show rounded-lg" role="alert" id="errorAlert">
            @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
    }
    <div id="globalError" class="alert alert-danger rounded-lg" style="display: none;"></div>

    <a asp-action="AddEdit" asp-controller="Product" class="btn btn-primary btn-sm mb-4">Create New Item</a>

    <div class="mb-4">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text bg-white"><i class="bi bi-search"></i></span>
                    <input type="text" id="searchName" class="form-control rounded-lg" placeholder="Search by name" />
                </div>
            </div>
            <div class="col-md-3">
                <select id="categoryId" class="form-select rounded-lg">
                    <option value="">All Categories</option>
                    @foreach (Category category in ViewBag.Categories ?? new List<Category>())
                    {
                            <option value="@category.CategoryId">@category.Name</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <select id="ingredientId" class="form-select rounded-lg">
                    <option value="">All Ingredients</option>
                    @foreach (Ingredient ingredient in ViewBag.Ingredients ?? new List<Ingredient>())
                    {
                            <option value="@ingredient.IngredientId">@ingredient.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div id="searchResults">
        @await Html.PartialAsync("_ProductList", Model)
    </div>

    <!-- Delete Product Modal -->
    <div class="modal fade" id="deleteProductModal" tabindex="-1" aria-labelledby="deleteProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content rounded-lg">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold" id="deleteProductModalLabel">Delete Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="deleteProductForm" asp-action="Delete" asp-controller="Product" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <input type="hidden" id="deleteProductId" name="id" />
                        <p>Are you sure you want to delete this product?</p>
                        <p class="text-danger" id="deleteError"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
        <script>
            $(document).ready(function () {
                // Auto-dismiss alerts after 3 seconds
                setTimeout(function () {
                    $('#successAlert, #errorAlert').fadeOut('slow');
                }, 3000);

                // Show global message (error or success)
                function showGlobalMessage(message, isSuccess = false) {
                    $('#globalError')
                        .removeClass('alert-danger alert-success')
                        .addClass(isSuccess ? 'alert-success' : 'alert-danger')
                        .text(message)
                        .show();
                    setTimeout(function () {
                        $('#globalError').fadeOut('slow');
                    }, 3000);
                }

                // Dynamic Search
                function performSearch() {
                    var searchName = $('#searchName').val();
                    var categoryId = $('#categoryId').val();
                    var ingredientId = $('#ingredientId').val();
                    console.log('Performing search, searchName:', searchName, 'categoryId:', categoryId, 'ingredientId:', ingredientId);
                    $.ajax({
                        url: '@Url.Action("Search", "Product")',
                        type: 'GET',
                        data: {
                            searchName: searchName,
                            categoryId: categoryId,
                            ingredientId: ingredientId
                        },
                        success: function (data) {
                            console.log('Search AJAX success, data length:', data.length);
                            $('#searchResults').html(data);
                        },
                        error: function (xhr, status, error) {
                            console.error('Search AJAX error:', status, error, 'Status:', xhr.status, 'Response:', xhr.responseText);
                            showGlobalMessage('Error loading products: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                            $('#searchResults').html('<p>Error loading products.</p>');
                        }
                    });
                }

                $('#searchName').on('input', function () {
                    performSearch();
                });

                $('#categoryId, #ingredientId').on('change', function () {
                    performSearch();
                });

                // Initial load
                performSearch();

                // Clean up modal state
                $('#deleteProductModal').on('show.bs.modal', function () {
                    $('.modal-backdrop').remove();
                    $('body').removeClass('modal-open');
                    $('#deleteError').text('');
                });

                $('#deleteProductModal').on('hidden.bs.modal', function () {
                    setTimeout(function () {
                        $('.modal-backdrop').remove();
                        $('body').removeClass('modal-open');
                    }, 100);
                });

                // Delete Product
                $(document).on('click', '.delete-btn', function () {
                    var productId = $(this).data('id');
                    console.log('Delete button clicked for product ID:', productId);
                    if (!productId || isNaN(productId)) {
                        showGlobalMessage('Invalid product ID.');
                        return;
                    }
                    $.ajax({
                        url: '@Url.Action("DeleteCheck", "Product")',
                        type: 'GET',
                        data: { id: productId },
                        success: function (response) {
                            console.log('DeleteCheck GET response:', JSON.stringify(response, null, 2));
                            if (response && response.success && response.product && response.product.productId) {
                                $('#deleteProductId').val(response.product.productId);
                                $('#deleteError').text('');
                                $('#deleteProductModal').modal('show');
                            } else {
                                showGlobalMessage(response && response.message ? response.message : 'Failed to load product data.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('DeleteCheck GET AJAX error:', status, error, xhr.status, xhr.responseText);
                            showGlobalMessage('Error loading product data: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                });

                $('#deleteProductForm').on('submit', function (e) {
                    e.preventDefault();
                    var productId = $('#deleteProductId').val();
                    console.log('Delete form submitted, ProductId:', productId);
                    if (!productId || isNaN(productId)) {
                        $('#deleteError').text('Product ID is missing or invalid.');
                        return;
                    }
                    $.ajax({
                        url: '@Url.Action("Delete", "Product")',
                        type: 'POST',
                        data: $(this).serialize(),
                        success: function (response) {
                            console.log('Delete POST response:', JSON.stringify(response, null, 2));
                            if (response && response.success) {
                                $('#deleteProductModal').modal('hide');
                                $('#deleteProductForm')[0].reset();
                                $('#deleteError').text('');
                                performSearch();
                                showGlobalMessage('Product deleted successfully.', true);
                            } else {
                                $('#deleteError').text(response && response.message ? response.message : 'Failed to delete product.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Delete POST AJAX error:', status, error, xhr.status, xhr.responseText);
                            $('#deleteError').text('Error deleting product: ' + (xhr.responseText || 'Request failed (Status: ' + xhr.status + ')'));
                        }
                    });
                });
            });
        </script>
}